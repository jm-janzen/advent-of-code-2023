#!/usr/bin/env ruby

f = File.read('./input.txt')

# Ugly hash so don't have to stringify keys
$numbers = {
  'one'   => '1',
  'two'   => '2',
  'three' => '3',
  'four'  => '4',
  'five'  => '5',
  'six'   => '6',
  'seven' => '7',
  'eight' => '8',
  'nine'  => '9',
}

def extract_alpha(line)
  $numbers.entries.each do |k, v|
    if line.include?(k)
      return $numbers[line[/#{k}/]]
    end
  end
end

# Taxonomy
#   1   = dig = digit
#   one = alp = alpha
def extract_first_number(line)
  # TODO Get idx of first digit (always present)
  # and first alpha, and return first one in line
  first_digit_idx = line.index(/\d/)
  first_alpha_idx = 999
  $numbers.keys.each do |key|

    #puts "Looking for index of #{key} in #{line}"
    idx = line.index(key)
    if !idx.nil?
      puts "\tfound #{idx}"
      first_alpha_idx = idx
    end
  end

  puts [first_digit_idx , first_alpha_idx].to_s
  if first_digit_idx < first_alpha_idx
    line[first_digit_idx]
  else
    extract_alpha(line)
  end
end

def extract_last_number(line)
  '666'
end

out = f.split("\n").reduce(0) do|sum, line|
  #
  # NOTE OK new new idea: bail at first number,
  # reverse, and repeat. No need to xform anything.

  first_num = extract_first_number(line)
  last_num = extract_last_number(line)

  sum += (first_num + last_num).to_i

  puts "#{sum} += (#{first_num} + #{last_num}) // #{line}"

  sum
end

# XXX 59587 too high
# XXX 53326 too loww
puts "Result: #{out}"

